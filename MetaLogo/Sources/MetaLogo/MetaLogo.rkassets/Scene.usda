#usda 1.0
(
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "Root"
{
    reorder nameChildren = ["untitled", "Material"]
    def "torus" (
        active = true
        references = @torus.usdc@</______>
    )
    {
        reorder nameChildren = ["______", "Material", "Material_Compose"]
        quatf xformOp:orient = (0.99999994, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "Material" (
            active = true
        )
        {
            prepend token outputs:mtlx:surface.connect = </Root/torus/Material/MaterialXPreviewSurface.outputs:out>
            token outputs:realitykit:vertex.connect = </Root/torus/Material/GeometryModifier_1.outputs:out>
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (2017.9458, -126.34568)
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 1462

            def Shader "MaterialXPreviewSurface" (
                active = true
            )
            {
                uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
                color3f inputs:diffuseColor = (0.023419624, 0.2832663, 0.46135616) (
                    colorSpace = "Input - Texture - sRGB - Display P3"
                )
                color3f inputs:diffuseColor.connect = None
                token outputs:out
                float2 ui:nodegraph:node:pos = (1654.3717, -243.6368)
                float2 ui:nodegraph:node:size = (207.5, 199)
                int ui:nodegraph:node:stackingOrder = 1376
            }

            def Shader "Normal"
            {
                uniform token info:id = "ND_normal_vector3"
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-430.59598, -177.38489)
                float2 ui:nodegraph:node:size = (128.5, 40)
                int ui:nodegraph:node:stackingOrder = 1050
            }

            def Shader "Multiply"
            {
                uniform token info:id = "ND_multiply_vector3FA"
                prepend float3 inputs:in1.connect = </Root/torus/Material/Normal.outputs:out>
                float inputs:in2 = -0.25
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-314.89545, -169.25635)
                float2 ui:nodegraph:node:size = (60, 36)
                int ui:nodegraph:node:stackingOrder = 1478
            }

            def Shader "Add"
            {
                uniform token info:id = "ND_add_vector3"
                float3 inputs:in1.connect = </Root/torus/Material/Multiply.outputs:out>
                float3 inputs:in2.connect = </Root/torus/Material/Position.outputs:out>
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-230.77985, -151.16083)
                float2 ui:nodegraph:node:size = (61.5, 36.5)
                int ui:nodegraph:node:stackingOrder = 683
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in1"]
            }

            def Shader "Position"
            {
                uniform token info:id = "ND_position_vector3"
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-427.0957, -125.928955)
                float2 ui:nodegraph:node:size = (133.5, 40)
                int ui:nodegraph:node:stackingOrder = 1053
            }

            def Shader "Sin"
            {
                uniform token info:id = "ND_sin_float"
                float inputs:in.connect = </Root/torus/Material/Multiply_2.outputs:out>
                float outputs:out
                float2 ui:nodegraph:node:pos = (352.64886, -162.44843)
                float2 ui:nodegraph:node:size = (116, 40)
                int ui:nodegraph:node:stackingOrder = 1240
            }

            def Shader "Multiply_1"
            {
                uniform token info:id = "ND_multiply_float"
                float inputs:in1.connect = </Root/torus/Material/Sin.outputs:out>
                float inputs:in2 = 2
                float inputs:in2.connect = </Root/torus/Material/Amount.outputs:out>
                float outputs:out
                float2 ui:nodegraph:node:pos = (468.8476, -154.12631)
                float2 ui:nodegraph:node:size = (60, 36)
                int ui:nodegraph:node:stackingOrder = 1482
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
            }

            def Shader "Multiply_2"
            {
                uniform token info:id = "ND_multiply_float"
                float inputs:in1.connect = </Root/torus/Material/AngleInXY.outputs:out>
                float inputs:in2 = 2
                float inputs:in2.connect = </Root/torus/Material/Period.outputs:out>
                float outputs:out
                float2 ui:nodegraph:node:pos = (252.99377, -162.20807)
                float2 ui:nodegraph:node:size = (60, 36)
                int ui:nodegraph:node:stackingOrder = 1240
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
            }

            def Shader "Subtract"
            {
                uniform token info:id = "ND_subtract_vector3"
                float3 inputs:in1.connect = </Root/torus/Material/Add_1.outputs:out>
                float3 inputs:in2.connect = </Root/torus/Material/Position_1.outputs:out>
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (1499.3241, -61.234142)
                float2 ui:nodegraph:node:size = (61.5, 36)
                int ui:nodegraph:node:stackingOrder = 1450
            }

            def Shader "Cos"
            {
                uniform token info:id = "ND_cos_float"
                float inputs:in.connect = </Root/torus/Material/AngleInXY.outputs:out>
                float outputs:out
                float2 ui:nodegraph:node:pos = (271.4936, -102.71217)
                float2 ui:nodegraph:node:size = (116, 40)
                int ui:nodegraph:node:stackingOrder = 1293
            }

            def Shader "Multiply_3"
            {
                uniform token info:id = "ND_multiply_float"
                float inputs:in1.connect = </Root/torus/Material/Sin_1.outputs:out>
                float inputs:in2 = -1
                float outputs:out
                float2 ui:nodegraph:node:pos = (371.0361, -31.631416)
                float2 ui:nodegraph:node:size = (60, 36)
                int ui:nodegraph:node:stackingOrder = 1477
            }

            def Shader "Cos_1"
            {
                uniform token info:id = "ND_cos_float"
                float inputs:in.connect = </Root/torus/Material/Multiply_4.outputs:out>
                float outputs:out
                float2 ui:nodegraph:node:pos = (254.45517, 18.578838)
                float2 ui:nodegraph:node:size = (122.5, 53)
                int ui:nodegraph:node:stackingOrder = 1293
            }

            def Shader "Multiply_4"
            {
                uniform token info:id = "ND_multiply_float"
                float inputs:in1.connect = </Root/torus/Material/AngleInXY.outputs:out>
                float inputs:in2 = 2
                float inputs:in2.connect = </Root/torus/Material/Period.outputs:out>
                float outputs:out
                float2 ui:nodegraph:node:pos = (155.99112, 18.11369)
                float2 ui:nodegraph:node:size = (60, 36)
                int ui:nodegraph:node:stackingOrder = 1293
            }

            def Shader "Multiply_5"
            {
                uniform token info:id = "ND_multiply_float"
                float inputs:in1.connect = </Root/torus/Material/Cos_1.outputs:out>
                float inputs:in2 = 2
                float inputs:in2.connect = </Root/torus/Material/Amount.outputs:out>
                float outputs:out
                float2 ui:nodegraph:node:pos = (367.07388, 63.658955)
                float2 ui:nodegraph:node:size = (60, 36)
                int ui:nodegraph:node:stackingOrder = 1480
            }

            def Shader "Normalize"
            {
                uniform token info:id = "ND_normalize_vector3"
                float3 inputs:in.connect = </Root/torus/Material/Tangent.outputs:out>
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (647.15186, -50.90705)
                float2 ui:nodegraph:node:size = (149, 40)
                int ui:nodegraph:node:stackingOrder = 1296
            }

            def Shader "Sin_1"
            {
                uniform token info:id = "ND_sin_float"
                float inputs:in.connect = </Root/torus/Material/AngleInXY.outputs:out>
                float outputs:out
                float2 ui:nodegraph:node:pos = (257.58124, -43.374714)
                float2 ui:nodegraph:node:size = (118, 53)
                int ui:nodegraph:node:stackingOrder = 1293
            }

            def Shader "Normal_1"
            {
                uniform token info:id = "ND_normal_vector3"
                string inputs:space
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (532.8826, 20.397848)
                float2 ui:nodegraph:node:size = (141, 53)
                int ui:nodegraph:node:stackingOrder = 1456
            }

            def Shader "Position_1"
            {
                uniform token info:id = "ND_position_vector3"
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (1365.5189, -53.079056)
                float2 ui:nodegraph:node:size = (146, 53)
                int ui:nodegraph:node:stackingOrder = 1452
            }

            def Shader "Normalize_1"
            {
                uniform token info:id = "ND_normalize_vector3"
                float3 inputs:in.connect = </Root/torus/Material/OffsetNormal.outputs:out>
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (1160.6387, 24.730185)
                float2 ui:nodegraph:node:size = (161, 53)
                int ui:nodegraph:node:stackingOrder = 1443
            }

            def Shader "Multiply_6"
            {
                uniform token info:id = "ND_multiply_vector3FA"
                float3 inputs:in1.connect = </Root/torus/Material/Normalize_1.outputs:out>
                float inputs:in2 = 0.25
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (1287.9414, -114.402115)
                float2 ui:nodegraph:node:size = (60, 36)
                int ui:nodegraph:node:stackingOrder = 1446
            }

            def Shader "Add_1"
            {
                uniform token info:id = "ND_add_vector3"
                float3 inputs:in1.connect = </Root/torus/Material/CenterOffset.outputs:out>
                float3 inputs:in2.connect = </Root/torus/Material/Multiply_6.outputs:out>
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (1373.3784, -134.40001)
                float2 ui:nodegraph:node:size = (61.5, 36.5)
                int ui:nodegraph:node:stackingOrder = 1419
            }

            def Shader "CenterLine"
            {
                uniform token info:id = "ND_separate3_vector3"
                float3 inputs:in.connect = </Root/torus/Material/Add.outputs:out>
                float outputs:outx
                float outputs:outy
                float outputs:outz
                float2 ui:nodegraph:node:pos = (-106.70054, -156.22395)
                float2 ui:nodegraph:node:size = (119, 145)
                int ui:nodegraph:node:stackingOrder = 1469
            }

            def Shader "AngleInXY"
            {
                uniform token info:id = "ND_atan2_float"
                float inputs:inx.connect = </Root/torus/Material/CenterLine.outputs:outy>
                float inputs:iny.connect = </Root/torus/Material/CenterLine.outputs:outx>
                float outputs:out
                float2 ui:nodegraph:node:pos = (39.260254, -86.61548)
                float2 ui:nodegraph:node:size = (151, 53)
                int ui:nodegraph:node:stackingOrder = 1036
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = []
            }

            def Shader "OffsetNormal"
            {
                uniform token info:id = "ND_crossproduct_vector3"
                float3 inputs:in1.connect = </Root/torus/Material/Normalize.outputs:out>
                float3 inputs:in2.connect = </Root/torus/Material/Bitangent.outputs:out>
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (978.59296, 23.47303)
                float2 ui:nodegraph:node:size = (167.5, 53)
                int ui:nodegraph:node:stackingOrder = 1457
            }

            def Shader "Tangent"
            {
                uniform token info:id = "ND_combine3_vector3"
                float inputs:in1.connect = </Root/torus/Material/Cos.outputs:out>
                float inputs:in2.connect = </Root/torus/Material/Multiply_3.outputs:out>
                float inputs:in3.connect = </Root/torus/Material/Multiply_5.outputs:out>
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (494.1865, -50.847828)
                float2 ui:nodegraph:node:size = (131.5, 54)
                int ui:nodegraph:node:stackingOrder = 1293
            }

            def Shader "Bitangent"
            {
                uniform token info:id = "ND_crossproduct_vector3"
                float3 inputs:in1.connect = </Root/torus/Material/Normal_1.outputs:out>
                float3 inputs:in2.connect = </Root/torus/Material/Normalize.outputs:out>
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (780.4984, 36.524128)
                float2 ui:nodegraph:node:size = (150.5, 53)
                int ui:nodegraph:node:stackingOrder = 1454
            }

            def Shader "CenterOffset"
            {
                uniform token info:id = "ND_combine3_vector3"
                float inputs:in1.connect = </Root/torus/Material/CenterLine.outputs:outx>
                float inputs:in2.connect = </Root/torus/Material/CenterLine.outputs:outy>
                float inputs:in3.connect = </Root/torus/Material/Multiply_1.outputs:out>
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (623.1128, -265.80557)
                float2 ui:nodegraph:node:size = (162, 54)
                int ui:nodegraph:node:stackingOrder = 1416
            }

            def Shader "GeometryModifier_1"
            {
                uniform token info:id = "ND_realitykit_geometrymodifier_2_0_vertexshader"
                float3 inputs:bitangent
                color4f inputs:color
                float3 inputs:modelPositionOffset.connect = </Root/torus/Material/Subtract.outputs:out>
                float3 inputs:normal.connect = </Root/torus/Material/Normalize_1.outputs:out>
                float2 inputs:uv0
                token outputs:out
                float2 ui:nodegraph:node:pos = (1714.8289, 29.71144)
                int ui:nodegraph:node:stackingOrder = 1467
            }

            def Shader "Period"
            {
                uniform token info:id = "ND_constant_float"
                float inputs:value = 2
                float outputs:out
                float2 ui:nodegraph:node:pos = (-82.61179, 31.361288)
                int ui:nodegraph:node:stackingOrder = 1554
            }

            def Shader "Amount"
            {
                uniform token info:id = "ND_constant_float"
                float inputs:value = 3
                float inputs:value.connect = </Root/torus/Material/Remap.outputs:out>
                float outputs:out
                float2 ui:nodegraph:node:pos = (2.7198405, 196.30069)
                int ui:nodegraph:node:stackingOrder = 1497
            }

            def Shader "Time"
            {
                uniform token info:id = "ND_time_float"
                float outputs:out
                float2 ui:nodegraph:node:pos = (-568.6715, 173.6863)
                int ui:nodegraph:node:stackingOrder = 1536
            }

            def Shader "Sin_2"
            {
                uniform token info:id = "ND_sin_float"
                float inputs:in.connect = </Root/torus/Material/Time.outputs:out>
                float outputs:out
                float2 ui:nodegraph:node:pos = (-391.6851, 176.24557)
                int ui:nodegraph:node:stackingOrder = 1540
            }

            def Shader "Remap"
            {
                uniform token info:id = "ND_remap_float"
                float inputs:in.connect = </Root/torus/Material/Sin_2.outputs:out>
                float inputs:inhigh
                float inputs:inlow = -1
                float inputs:outhigh = 4
                float inputs:outlow
                float outputs:out
                float2 ui:nodegraph:node:pos = (-213.32172, 249.23724)
                int ui:nodegraph:node:stackingOrder = 1551
            }
        }

        over "______" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </Root/torus/Material> (
                bindMaterialAs = "weakerThanDescendants"
            )
        }
    }
}

